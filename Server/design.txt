Socket:
	Holds all winsock data
	only has send and recieve

	Derives ServerSocket, and ClientSocket
	constructor with port, or port and host

Server:
	holds a ServerSocket
	manages ClientSocket* vector
	manages incoming clients and puts them in vectors
	manages outgoing messages
	multiple threads (one to communicate with each client)

main:
	has server
	holds current client*
	manages commands

Server:
	Server is initialized and listens for connections on thread.
	When it accepts, it creates a new client object and adds it to client vector
	the user can use "listconns" to see everything in client vector
	when they see one they can use "connect <ip/id>" to select current to new vector

	another thread talks the current if it exists

Enum of commands and types
"type/command <params/string>""

Disconnect:
	send message to all clients that asks to dc
	all threads will end when they get the close message from the client.
	they will finish recieving and then send close and close


Notes:
	Sockets can be treated as descriptor (adress)
	associate descriptor with socket - pass that to arrays but talk to sockets with other functions
	implement get socket from descriptor

Todo:
	connection handling and basic client functionality
	transfer command
	screen sharing
	screenshot
	webcam
	mic

	overhaul the address storage system (ntohs research)
	make ids based on ids and not ips

Talking Points:
	path storage
	threads and references

Errors:
	send exit message to client when closing server

Links
	https://stackoverflow.com/questions/478898/how-do-i-execute-a-command-and-get-the-output-of-the-command-within-c-using-po
	https://github.com/melardev/ReverseShell/blob/master/ReverseShellClient/ReverseShellClient.cpp
	https://stackoverflow.com/questions/8578909/how-to-get-current-console-background-and-text-colors
	https://www.geeksforgeeks.org/multithreading-in-cpp/
